2014-12-20
BUG: a strange situation: a few .gz.txt among all .gz.txt.gz files 
work-arounds: check whether this file exists before packing
---------------------------------------------------------------
There are few files where there are blank lines between two successive updates
---------------------------------------------------------------
Note: do not put everything into log, which makes the log file extremely large
Note: logging costs much time! do not log frequently!
---------------------------------------------------------------
Once apon a time, archive.routeviews.org fail to work, while routeviews.org can
However now the latter fails in IPv6 but the former can in both
--------------------------------------------------------------
While downloading and parsing prolonged 2, we failed to parse RV.wide20030818010(program cannot stop)
solve: delete the file name from file list
------------------------------------------------------------------
when viewing a long line, vim can become very slow...
----------------------------------------------------------------
Never press ctrl+Z, use ctrl+C instead
-----------------------------------------------------------------
Interesing fact:
File size (write diresctly into .gz) slightly < file size (gzip a text file)
----------------------------------------------------------------------
Note: if a peer is too strange or active, we can simply dismiss it from analysis
---------------------------------------------------------------------------
Note: according to limited sampling, if the date of a RRC/RV update file is X minutes, then the updates inside the file
could be as early as X(for rrc)and X~X+several seconds(for RV), and as late as X+4:99/5(for rrc) and X + 15 seconds(For RV)
In conclusion, the date-time of the updates will be always within the confine of the file name
-------------------------------------------------------------------------
Note: run delete reset program only once! running it multiple times may cause over-deletion!
----------------------------------------------------------------------
I've decided not to delete IPv6 peer reset. For some peers, its FIB size is much smaller than observed prefixes (which is very strange), so the 'bottom search' function can make two resets have the same end time. Anyway, IPv6 is a little strange in this aspect (possibly makes interesting future work).
----------------------------------------------------------------------
We are afraid: cannot find a single right time when deleting reset
We are not afraid: sometimes the reset updates has been deleted already by previous rounds
------------------------------------------------------------------------
It's very strange that rrc3 and rrc14 in event 1 has empty update file lists. So I delete the two collectors in rib_info (for one event), where major collector information are solicited by our code.
rrc has no updates from 20081221 to 20081224, so I delete rrc03 from 1's rib info
-----------------------------------------------------------------------
sometimes we find some IPv4 peers with very very small FIB size, e.g., http://data.ris.ripe.net/rrc03/2005.09/bview.20050910.0000.gz,
although it costs much time and artifact when deleting reset, it will not affect our measurement results because we ignore non-global peers
-----------------------------------
In practice I failed to delete some resets. But it will not affect our results because they are local events!
----------------------------------
Do not delete list and dict items while iterating them
---------------------------------
When deleting reset the 2013 data quickly, we ignore non-global monitors (90% threshold). We continue with this policy in future work!
------------------------------------
For 2013 month 1~4, I unlikely finished the deleting reset process, because when the program stopped, I thought that the work
of finding reset start and end has finished, which is unlikely to be true. I should make up the missed collectors in future
work!
-------------------------------------
Calling subprocess too many time can cause memory issue likely because of fork()
------------------------------------
I found that rrc00 has several blank days in 2013.03 This will be a big problem because a single day of blank could omit the  
whole month data. Let's see how frequent such things happen!
------------------------------------
route-views.isc has blank period from 20130308.0815 to 20130308.1807, but I do not want to delete this collector from analysis. 
I should code: do not wait a collector for more than an hour!
-----------------------------------
in alarm class, using only one radix takes 1.5 length of time than before. But it saves memory
